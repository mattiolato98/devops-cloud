name: Continuous Integration and Delivery

on:
  push:
    branches:
      - main

jobs:
  vulnerability-scan:
    name: Run Dependency Vulnerability Scan on Docker Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          format: table
          exit-code: 1
          severity: CRITICAL
          ignore-unfixed: true
  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: vulnerability-scan
    env:
      CI_IMAGE_TAG: development
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Add environment variables to .env
        run: |
          echo "CI_REGISTRY=${{ secrets.CI_REGISTRY }}" >> .env
          echo "CI_REGISTRY_USER=${{ secrets.CI_REGISTRY_USER }}" >> .env
          echo "CI_REGISTRY_TOKEN=${{ secrets.CI_REGISTRY_TOKEN }}" >> .env
          echo "CI_IMAGE_TAG=development" >> .env
          echo "GH_REPOSITORY=${{ secrets.GH_REPOSITORY }}" >> .env

          echo "DEBUG=0" >> .env
          echo "DJANGO_SETTINGS_MODULE=django_project.production_settings" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }}" >> .env

          echo "DATABASE=${{ secrets.DATABASE }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "MYSQL_HOSTNAME=${{ secrets.MYSQL_HOSTNAME }}" >> .env
          echo "MYSQL_PORT=${{ secrets.MYSQL_PORT }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
      - name: Log in to Github Packages
        run: |
          echo ${{ secrets.CI_REGISTRY_TOKEN }} | docker login ghcr.io -u ${{ secrets.CI_REGISTRY_USER }} --password-stdin
      - name: Build and push images
        run: |
          docker compose build --pull 
          docker compose push
  test:
    name: Run Django Tests
    runs-on: ubuntu-latest
    needs: build
    env:
      CI_IMAGE_TAG: development
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Add environment variables to .env
        run: |
          echo "CI_REGISTRY=${{ secrets.CI_REGISTRY }}" >> .env
          echo "CI_REGISTRY_USER=${{ secrets.CI_REGISTRY_USER }}" >> .env
          echo "CI_REGISTRY_TOKEN=${{ secrets.CI_REGISTRY_TOKEN }}" >> .env
          echo "CI_IMAGE_TAG=development" >> .env
          echo "GH_REPOSITORY=${{ secrets.GH_REPOSITORY }}" >> .env

          echo "DEBUG=0" >> .env
          echo "DJANGO_SETTINGS_MODULE=django_project.production_settings" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }}" >> .env

          echo "DATABASE=${{ secrets.DATABASE }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "MYSQL_HOSTNAME=${{ secrets.MYSQL_HOSTNAME }}" >> .env
          echo "MYSQL_PORT=${{ secrets.MYSQL_PORT }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
      - name: Log in to Github Packages
        run: |
          echo ${{ secrets.CI_REGISTRY_TOKEN }} | docker login ghcr.io -u ${{ secrets.CI_REGISTRY_USER }} --password-stdin
      - name: Pull Docker images
        run: |
          docker compose pull
      - name: Check for missing migrations
        run: |
          docker compose run --rm django-app python manage.py makemigrations --check --dry-run
          docker compose rm -f -s
      - name: Run Django tests
        run: |
          docker compose run --rm django-app python manage.py test accounts articles pages
          docker compose rm -f -s
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: [build, test]
    env:
      CI_IMAGE_TAG: development
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Add environment variables to .env
        run: |
          echo "CI_REGISTRY=${{ secrets.CI_REGISTRY }}" >> .env
          echo "CI_REGISTRY_USER=${{ secrets.CI_REGISTRY_USER }}" >> .env
          echo "CI_REGISTRY_TOKEN=${{ secrets.CI_REGISTRY_TOKEN }}" >> .env
          echo "CI_IMAGE_TAG=development" >> .env
          echo "GH_REPOSITORY=${{ secrets.GH_REPOSITORY }}" >> .env

          echo "DEBUG=0" >> .env
          echo "DJANGO_SETTINGS_MODULE=django_project.production_settings" >> .env
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env
          echo "DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }}" >> .env

          echo "DATABASE=${{ secrets.DATABASE }}" >> .env
          echo "MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}" >> .env
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" >> .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "MYSQL_HOSTNAME=${{ secrets.MYSQL_HOSTNAME }}" >> .env
          echo "MYSQL_PORT=${{ secrets.MYSQL_PORT }}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
      - name: Add the private SSH key to the ssh-agent
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
        run: |
          mkdir -p ~/.ssh
          ssh-agent -a $SSH_AUTH_SOCK > /dev/null
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          ssh-add - <<< "${{ secrets.SSH_PRIVATE_KEY }}"
      - name: Deploy images to AWS
        env:
          SSH_AUTH_SOCK: /tmp/ssh_agent.sock
          AWS_IP_ADDRESS: ${{ secrets.AWS_IP_ADDRESS }}
        run: |
          scp -o StrictHostKeyChecking=no -r ./.env ./docker-compose.yml ec2-user@${AWS_IP_ADDRESS}:/home/ec2-user/app
          sh deploy.sh